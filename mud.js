// Generated by CoffeeScript 1.6.2
(function() {
  var DEBUG, ESCAPE, INDENT, Mud, TAGS, Tag, name, _fn, _fn1, _i, _j, _len, _len1, _ref, _ref1,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  DEBUG = false;

  TAGS = {
    "void": 'area base br col command embed hr img input\nkeygen link meta param source track wbr'.split(/\s+/),
    normal: 'script style textarea title html head body\nnav header footer aside article section\nh1 h2 h3 h4 h5 h6 hgroup div p pre blockquote\nhr ul ol li dl dt dd span a em strong b i u\ns mark small del ins sup sub dfn code var samp\nkbd q cite ruby rp rt br wbr bdo bdi table caption\ntr td th thead tfoot tbody colgroup col img\nfigcaption figure map area video audio source track\nnoscript object param embed iframe canvas abbr address\nmeter progress time form button input textarea select\noption optgroup label fieldset legend datalist menu\noutput details summary'.split(/\s+/)
  };

  INDENT = (function() {
    var line;

    line = /^/gm;
    return function(item) {
      var i, indentation, _i, _ref;

      indentation = '';
      if (Mud.INDENTATION > 0) {
        for (i = _i = 0, _ref = Mud.INDENTATION; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          indentation += '\t';
        }
      }
      return item.replace(line, indentation);
    };
  })();

  Mud = function() {
    var arg, args, result, _i, _len;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = '';
    if (args != null) {
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        if (arg != null) {
          if (Array.isArray(arg)) {
            result += Mud.apply(null, arg);
          } else {
            result += (function() {
              switch (typeof arg) {
                case 'string':
                  return arg;
                case 'number':
                  return arg.toString();
                case 'object':
                  return JSON.stringify(arg);
                case 'function':
                  return Mud(arg.call(Mud));
                default:
                  return '';
              }
            })();
          }
        }
      }
      return result;
    }
  };

  Mud.INDENTATION = 0;

  Tag = (function() {
    function Tag(name, _void) {
      this.name = name;
      this["void"] = _void != null ? _void : false;
    }

    Tag.prototype.render = function() {
      var arg, args, attributes, body, item, name, result, value, _i, _j, _len, _len1;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (DEBUG) {
        console.log(INDENT(this.name));
      }
      body = [];
      attributes = {};
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        switch (typeof arg) {
          case 'string':
          case 'number':
          case 'function':
            body.push(arg);
            break;
          case 'object':
            for (name in arg) {
              if (!__hasProp.call(arg, name)) continue;
              value = arg[name];
              attributes[name] = value;
            }
        }
      }
      result = '\n' + INDENT("<" + this.name);
      attributes = (function() {
        var _results;

        _results = [];
        for (name in attributes) {
          if (!__hasProp.call(attributes, name)) continue;
          value = attributes[name];
          _results.push("" + (ESCAPE.attribute(name)) + "='" + (ESCAPE.attribute(value)) + "'");
        }
        return _results;
      })();
      if (attributes.length !== 0) {
        result += ' ' + attributes.join(' ');
      }
      if (this["void"]) {
        result += '/>\n';
      } else {
        result += '>\n';
        Mud.INDENTATION += 1;
        if (DEBUG) {
          console.log(INDENT("" + this.name + "::body"));
        }
        for (_j = 0, _len1 = body.length; _j < _len1; _j++) {
          item = body[_j];
          result += Mud(ESCAPE.html(item));
        }
        Mud.INDENTATION -= 1;
        result += '\n' + INDENT(Mud("</" + this.name + ">\n"));
      }
      return result;
    };

    return Tag;

  })();

  ESCAPE = {
    html: (function() {
      var replace;

      replace = function(value) {
        return value.replace(/</g, '&lt;').replace(/&/g, '&amp;');
      };
      return function(value) {
        switch (typeof value) {
          case 'string':
          case 'number':
            return INDENT(replace(value.toString()));
          case 'object':
            return INDENT(JSON.stringify(value));
          default:
            return value;
        }
      };
    })(),
    attribute: function(value) {
      switch (typeof value) {
        case 'object':
          return JSON.stringify(object);
        case 'function':
          return Mud(value);
        default:
          return value.toString().replace(/</g, '&lt;').replace(/&/g, '&amp;').replace(/\\/g, '\\\\').replace(/'/g, '\\\'');
      }
    }
  };

  _ref = TAGS.normal;
  _fn = function(name) {
    var tag;

    tag = new Tag(name);
    return Mud[name] = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return tag.render.apply(tag, args);
    };
  };
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    name = _ref[_i];
    _fn(name);
  }

  _ref1 = TAGS["void"];
  _fn1 = function(name) {
    var tag;

    tag = new Tag(name, true);
    return Mud[name] = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return tag.render.apply(tag, args);
    };
  };
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    name = _ref1[_j];
    _fn1(name);
  }

  Mud.text = function() {
    var arg, args, result;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = (function() {
      var _k, _len2, _results;

      _results = [];
      for (_k = 0, _len2 = args.length; _k < _len2; _k++) {
        arg = args[_k];
        _results.push(ESCAPE.html(arg));
      }
      return _results;
    })();
    return result.join('');
  };

  Mud.raw = function() {
    var arg, args, result;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = (function() {
      var _k, _len2, _results;

      _results = [];
      for (_k = 0, _len2 = args.length; _k < _len2; _k++) {
        arg = args[_k];
        switch (typeof arg) {
          case 'string':
          case 'number':
            _results.push(arg);
            break;
          case 'object':
            _results.push(JSON.stringify(arg));
            break;
          case 'function':
            _results.push(Mud(arg));
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    })();
    return result.join('');
  };

  module.exports = Mud;

}).call(this);
